@page "/create-ration-test"

@inject IRationAlgorithm RationAlgorithm

<PageTitle>Create test ration</PageTitle>

@if (_isRunning)
{
	<LoadingAnimationComponent Text="Creating ration"/>
}
else
{
	<h1>Create ration</h1>

	<h5>Add roughage product</h5>
	<EditForm Model="@_roughageToAdd" OnSubmit="@AddRoughage">
		<div class="form-group">
			<label for="Name">Name</label>
			<InputText @bind-Value="_roughageToAdd.Name" class="form-control" id="Name"/>
		</div>
		<div class="form-group">
			<label for="VEM">VEM in /kg</label>
			<InputNumber @bind-Value="_roughageToAdd.FeedAnalysis!.VEM" class="form-control" id="VEM"/>
		</div>
		<div class="form-group">
			<label for="RE">RE in g/kg</label>
			<InputNumber @bind-Value="_roughageToAdd.FeedAnalysis!.RE" class="form-control" id="RE"/>
		</div>
		<br/>
		<input type="submit" class="btn btn-primary" value="Add product"/>
	</EditForm>

	<br/>

	@if (_roughages.Any())
	{
		<h5>Roughage products</h5>

		<table class="table table-bordered">
			<thead>
			<tr>
				<th scope="col">Product</th>
				<th scope="col">VEM</th>
				<th scope="col">RE</th>
			</tr>
			</thead>
			<tbody>
			@foreach (Roughage roughage in _roughages)
			{
				<tr>
					<th scope="row">@roughage.Name</th>
					<td>@roughage.FeedAnalysis!.VEM</td>
					<td>@roughage.FeedAnalysis!.RE</td>
				</tr>
			}
			</tbody>
		</table>
	}

	<br/>

	<h5>Other data</h5>

	<div class="form-group">
		<label>Number of cows</label>
		<input class="form-control" @bind="_herd.NumberOfAnimals"/>
	</div>
	<div class="form-group">
		<label>Amount of milk produced in liters</label>
		<input class="form-control" @bind="_milkProduced.Amount"/>
	</div>
	<div class="form-group">
		<label>Net grass intake in kg dm</label>
		<input class="form-control" @bind="_grassIntakeInKgDm"/>
	</div>
	<div class="form-group">
		<label>Amount of VEM in each kg dm of grass</label>
		<input class="form-control" @bind="_vemInGrass"/>
	</div>
	<div class="form-group">
		<label>Amount of RE in each kg dm of grass in grams</label>
		<input class="form-control" @bind="_reInGrassInGrams"/>
	</div>

	<br/>
	<div>
		<button class="btn btn-primary" @onclick="CreateRation">Create ration</button>
	</div>
	<br/>

@if (_feedRation != null)
{
	<br/>

	<h1>Ration</h1>
	<RationWidget Ration="@_feedRation"/>
}
}

@code {

	private bool _isRunning;

	private FeedRation? _feedRation;

	private readonly Herd _herd = new();

	private Roughage _roughageToAdd = new() { FeedAnalysis = new FeedAnalysis(), Available = true };

	private readonly List<Roughage> _roughages = new();

	private readonly MilkProductionAnalysis _milkProduced = new();

	private float _grassIntakeInKgDm;

	private float _vemInGrass;

	private float _reInGrassInGrams;

	private async Task CreateRation()
	{
		if (_isRunning)
		{
			return;
		}

		_isRunning = true; 
	
	// Give Blazor WebAssembly time to update the ui
		await Task.Delay(1);

		GrazingActivity grazingActivity = new() { From = default, To = default, Herd = _herd, Plot = new Plot { FeedAnalysis = new FeedAnalysis { RE = _reInGrassInGrams, VEM = _vemInGrass } } };
		_feedRation = await RationAlgorithm.CreateRationAsync(_roughages, _herd, _grassIntakeInKgDm, _milkProduced, grazingActivity);

		_isRunning = false;
	}

	private void AddRoughage()
	{
		if (string.IsNullOrEmpty(_roughageToAdd.Name)) return;

		_roughageToAdd.FeedAnalysis!.VEM ??= 0;

		_roughageToAdd.FeedAnalysis.RE ??= 0;

		_roughages.Add(_roughageToAdd);
		_roughageToAdd = new Roughage { FeedAnalysis = new FeedAnalysis(), Available = true };
	}

}