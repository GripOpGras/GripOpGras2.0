@page "/"
@inject IRationAlgorithm RationAlgorithm

<PageTitle>Create test ration</PageTitle>

@if (_isRunning)
{
	<LoadingAnimationComponent Text="Creating ration"/>
}
else
{
	@if (_errorMessage != string.Empty)
	{
		<div class="card text-white bg-danger mb-3">
			<div class="card-body">
				<h5 class="card-title">Error</h5>
				<p class="card-text">@_errorMessage</p>
			</div>
		</div>
	}
	@if (_feedRation != null)
	{
		<br/>

		<h1>Ration</h1>
		<RationWidget Ration="@_feedRation"/>
	}

	<h1>Data</h1>

	<h5>Add feedproduct</h5>
	<EditForm Model="@_feedProductToAdd" OnSubmit="@AddFeedProduct">
		<div class="form-group">
			<label for="Name">Name</label>
			<InputText @bind-Value="_feedProductToAdd.Name" class="form-control" id="Name"/>
		</div>
		<div class="form-group">
			<label for="VEM">VEM in /kg</label>
			<InputNumber @bind-Value="_feedProductToAdd.Vem" class="form-control" id="VEM"/>
		</div>
		<div class="form-group">
			<label for="RE">RE in g/kg</label>
			<InputNumber @bind-Value="_feedProductToAdd.Re" class="form-control" id="RE"/>
		</div>
		<div class="form-group">
			<label for="ProductTypeName">Type</label>
			<InputRadioGroup @bind-Value="@_feedProductToAdd.ProductTypeName">
				<br>
				@foreach (string productType in _productTypes)
				{
					<InputRadio Value="productType"/>
					@productType
					<br>
				}
			</InputRadioGroup>
		</div>

		<br/>
		<input type="submit" class="btn btn-primary" value="Add product"/>
	</EditForm>

	<br/>

	@if (_feedProducts.Any())
	{
		<h5>Products</h5>

		<table class="table table-bordered">
			<thead>
			<tr>
				<th scope="col">Product</th>
				<th scope="col">VEM</th>
				<th scope="col">RE</th>
				<th scope="col">Type</th>
			</tr>
			</thead>
			<tbody>
			@foreach (FeedProduct feedProduct in _feedProducts)
			{
				<tr>
					<th scope="row">@feedProduct.Name</th>
					<td>@feedProduct.FeedAnalysis!.VEM</td>
					<td>@feedProduct.FeedAnalysis!.RE</td>
					<td>@feedProduct.GetType().Name</td>
				</tr>
			}
			</tbody>
		</table>
	}

	<br/>

	<h5>Other data</h5>

	<div class="form-group">
		<label>Number of cows</label>
		<input class="form-control" @bind="_herd.NumberOfAnimals"/>
	</div>
	<div class="form-group">
		<label>Total amount of milk produced in liters by the herd</label>
		<input class="form-control" @bind="_milkProduced.Amount"/>
	</div>
	<div class="form-group">
		<label>Total net grass intake in kg dm</label>
		<input class="form-control" @bind="_grassIntakeInKgDm"/>
	</div>
	<div class="form-group">
		<label>Amount of VEM in each kg dm of grass</label>
		<input class="form-control" @bind="_vemInGrass"/>
	</div>
	<div class="form-group">
		<label>Amount of RE in each kg dm of grass in grams</label>
		<input class="form-control" @bind="_reInGrassInGrams"/>
	</div>
	<br/>
	<div>
		<button class="btn btn-primary" @onclick="CreateRation">Create ration</button>
	</div>
	<br/>
}

@code {

	private class FeedProductToAdd
	{
		public float Vem;

		public float Re;

		public string Name = string.Empty;

		public string ProductTypeName = nameof(Roughage);
	}

	private readonly List<string> _productTypes = new() { nameof(Roughage), nameof(SupplementaryFeedProduct) };

	private FeedProductToAdd _feedProductToAdd = new();

	private bool _isRunning;

	private FeedRation? _feedRation;

	private readonly Herd _herd = new();

	private readonly List<FeedProduct> _feedProducts = new();

	private readonly MilkProductionAnalysis _milkProduced = new();

	private float _grassIntakeInKgDm;

	private float _vemInGrass;

	private float _reInGrassInGrams;

	private string _errorMessage = string.Empty;

		private const string NamespaceOfFeedProductTypes = "GripOpGras2.Domain.FeedProducts.";

	private async Task CreateRation()
	{
		if (_isRunning)
		{
			return;
		}

		_isRunning = true;

		// Give Blazor WebAssembly time to update the ui
		await Task.Delay(1);

		GrazingActivity grazingActivity = new() { From = default, To = default, Herd = _herd, Plot = new Plot { FeedAnalysis = new FeedAnalysis { RE = _reInGrassInGrams, VEM = _vemInGrass } } };

		bool finishedWithException = false;
		try
		{
			_feedRation = await RationAlgorithm.CreateRationAsync(_feedProducts, _herd, _grassIntakeInKgDm, _milkProduced, grazingActivity);
		}
		catch (Exception e)
		{
			Console.WriteLine(e);
			_errorMessage = e.Message;
			finishedWithException = true;
		}
		if (!finishedWithException)
		{
			_errorMessage = string.Empty;
		}

		_isRunning = false;
	}

	private void AddFeedProduct()
	{
		if (_feedProductToAdd.Name == string.Empty)
		{
			_errorMessage = "The product name is not specified.";
			return;
		}
		;
		if (_feedProductToAdd.Vem == 0)
		{
			_errorMessage = "VEM must be greater than 0.";
			return;
		}

		FeedProduct feedProduct = TypeUtils.CreateInstance<FeedProduct>(NamespaceOfFeedProductTypes + _feedProductToAdd.ProductTypeName);

		feedProduct.Available = true;
		feedProduct.FeedAnalysis = new FeedAnalysis { RE = _feedProductToAdd.Re, VEM = _feedProductToAdd.Vem };
		feedProduct.Name = _feedProductToAdd.Name;

		_feedProducts.Add(feedProduct);

		_feedProductToAdd = new FeedProductToAdd();
	}

}